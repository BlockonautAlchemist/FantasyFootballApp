You are building a frontend MVP for a fantasy football assistant (a FantasyPros-style clone without drafting). Create a new React + Vite + TypeScript project with TailwindCSS that uses mock JSON and simple service functions to simulate an API. No backend yet.

Product scope (pages & features)

Make these routes (client-side router):
	•	/ Dashboard: shows top quick actions for this week (Start/Sit, Waivers, Trade, Lineup, SoS, News).
	•	/start-sit: compare two players and return a verdict + confidence + bullet reasons + optional pivots.
	•	/waivers: ranked pickups with FAAB guidance and suggested drops.
	•	/trade: enter two sides; show “value delta,” ROS impact, schedule strength change, risk score.
	•	/lineup: given my roster (mocked), output recommended starters + 2–3 pivots.
	•	/sos: simple heatmap/table for strength of schedule by position (weekly + ROS toggles).
	•	/news: list of short, actionable blurbs (mock) with tags (injury, role, matchup).

Tech & setup
	•	Stack: React 18 + Vite + TypeScript + TailwindCSS.
	•	Organize by feature with folders under src/.
	•	Use a tiny API layer that imports local JSON mocks to simulate requests.
	•	Keep styling minimal but clean with Tailwind utility classes and a small set of design tokens.

File structure

Create these (add more as needed):

/src
  /app
    main.tsx
    router.tsx
  /pages
    Dashboard.tsx
    StartSit.tsx
    Waivers.tsx
    Trade.tsx
    Lineup.tsx
    SoS.tsx
    News.tsx
  /components
    PlayerSearch.tsx
    PlayerCard.tsx
    ComparisonPanel.tsx
    TierBadge.tsx
    RiskChip.tsx
    FAABSlider.tsx
    SoSHeatmap.tsx
    Callout.tsx
    PageHeader.tsx
  /services
    api.ts
    types.ts
  /mocks
    playerCompare.mock.json
    waivers.mock.json
    trade.mock.json
    lineup.mock.json
    sos.mock.json
    news.mock.json
index.css

Tailwind
	•	Install Tailwind and configure content to scan index.html and all files in src/**/*.{ts,tsx}.
	•	Add two utility classes:
	•	.input = border, rounded, px-3, py-2, w-full
	•	.btn   = bg-black text-white rounded px-4 py-2 disabled:opacity-50

Types

In services/types.ts, define minimal types used everywhere:
	•	PlayerSummary { id:string; name:string; pos:"QB"|"RB"|"WR"|"TE"|"DST"|"K"; team:string; status?:string; bye?:number }
	•	StartSitInput { playerAId:string; playerBId:string; week:number; scoring:"standard"|"half_ppr"|"ppr" }
	•	StartSitResult { recommendation:"A"|"B"; confidence:number; reasons:string[]; pivots?:string[]; facts:any }
	•	WaiverItem { id:string; name:string; team:string; pos:string; avail:number; proj:number; roleTrend:"up"|"down"|"flat"; notes?:string }
	•	FAABGuidance { id:string; min:number; likely:number; max:number; rationale:string }
	•	TradeSide { players: PlayerSummary[] }
	•	TradeResult { verdict:"Accept"|"Reject"|"Consider"; delta:number; rosImpact:string; risk:number; reasons:string[] }
	•	LineupRec { starters:string[]; bench:string[]; pivots?:string[]; reasons:string[] }
	•	SoSCell { week:number; pos:string; strength: number }
	•	NewsItem { id:string; title:string; tag:"injury"|"role"|"matchup"|"other"; summary:string }

Mock data (JSON)

Fill each mock with sensible sample data. Example for playerCompare.mock.json:

{
  "input": { "playerAId": "nfl.p.1234", "playerBId": "nfl.p.5678", "week": 2, "scoring": "half_ppr" },
  "facts": {
    "playerA": { "name": "J. Smith", "team": "NYJ", "pos": "WR", "opp": "BUF", "proj": 13.4, "last4": [12.1,16.8,8.4,14.0], "snap": 0.82, "tgtShare": 0.25, "inj": "healthy" },
    "playerB": { "name": "M. Davis", "team": "MIA", "pos": "WR", "opp": "NE",  "proj": 12.6, "last4": [9.1,11.0,18.3,6.2], "snap": 0.71, "tgtShare": 0.19, "inj": "Q" }
  },
  "sos": { "A": 0.60, "B": 0.45 },
  "result": {
    "recommendation": "A",
    "confidence": 0.72,
    "reasons": ["Higher target share and snaps", "BUF slot CB allows 7.8 YPT", "MIA spreads targets; B questionable"],
    "pivots": ["N. Collins", "Z. Flowers"]
  }
}

Add similarly structured, realistic mocks for waivers (with FAAB min/likely/max), trade (two sides + result), lineup (starters/bench/pivots), SoS (array of {week,pos,strength}), and news (5–8 items).

Service layer (fake API)

In services/api.ts, export async functions that import() and return the mock JSON:
	•	comparePlayers(input: StartSitInput): Promise<StartSitResult & {facts:any;sos:any;input:StartSitInput}>
	•	getWaivers(week:number, position?:string): Promise<{candidates: WaiverItem[]; drops: PlayerSummary[]; faab: FAABGuidance[]}>
	•	analyzeTrade(sideA: PlayerSummary[], sideB: PlayerSummary[]): Promise<TradeResult>
	•	optimizeLineup(week:number): Promise<LineupRec>
	•	getSoS(pos?:string): Promise<SoSCell[]>
	•	getNews(): Promise<NewsItem[]>

Pages (minimal but functional)
	•	Dashboard: grid of cards linking to each tool + a “This Week” callout populated from mocks (e.g., “Start J. Smith over M. Davis (72%)”).
	•	Start/Sit:
	•	Inputs: player A ID, player B ID, week, scoring selector.
	•	On submit: call comparePlayers, render:
	•	verdict chip (e.g., “Start Player A” with %)
	•	reasons list
	•	small facts table for both players (proj, last4 avg, snap, tgtShare, opp)
	•	pivots row (if present)
	•	Waivers:
	•	Position filter, list of candidates with TierBadge, RiskChip, projected points, availability, and notes.
	•	FAAB slider component showing min/likely/max with rationale.
	•	Suggested drops table.
	•	Trade:
	•	Two columns; each lets you pick players (basic PlayerSearch reading a small local list).
	•	On analyze: show verdict, delta, risk (0–1), and reasons.
	•	Lineup:
	•	Show my roster (mock) with toggles by position.
	•	Button “Recommend lineup” → shows starters, bench, pivots, reasons.
	•	SoS:
	•	Heatmap component with weeks on X and positions on Y (use simple table cells with strength number; conditional color via Tailwind opacity).
	•	Toggle Week vs ROS.
	•	News:
	•	List of NewsItem cards with tag chips; each summary is 1–2 sentences and actionable.

Components

Build small, reusable pieces:
	•	PlayerSearch (simple text input now)
	•	PlayerCard (name, team, pos, small meta)
	•	ComparisonPanel (two-column stat compare)
	•	TierBadge (Tier 1–5 style)
	•	RiskChip (Low/Med/High)
	•	FAABSlider (read-only min/likely/max)
	•	SoSHeatmap (table-based)
	•	Callout (green/yellow/red states)
	•	PageHeader (title + subtitle)

Router & layout
	•	Central router in app/router.tsx (React Router).
	•	Global container width max-w-5xl mx-auto p-4.
	•	Sticky top nav with links to each tool.

Developer UX
	•	Include scripts: dev, build, preview.
	•	Add lightweight state (React state only; no Redux).
	•	Type everything (no any outside mocks).
	•	Keep components small and readable.

Acceptance criteria
	•	Runs with npm run dev.
	•	Navigating each route shows functional UI wired to mocks.
	•	Start/Sit returns the mock verdict + confidence and renders facts & reasons.
	•	Waivers shows candidates, suggested drops, and FAAB guidance.
	•	Trade returns a verdict + delta + risk + reasons from mock.
	•	Lineup returns a recommended starters list and bench.
	•	SoS renders a grid with numbers from mock.
	•	News lists 5–8 actionable items.
	•	All API calls are via services/api.ts importing JSON mocks so we can later swap them for real HTTP calls in Cursor without touching the UI.

Handoff note (for later in Cursor)

We will replace services/api.ts implementations to call:
	•	/api/yahoo/* for league/roster/free agents/stats
	•	/api/ai/* for LLM decisions
Keep the function signatures identical to minimize churn.

Please generate all files with sensible placeholder content and ensure the app builds and runs locally with the mocked flows described above.